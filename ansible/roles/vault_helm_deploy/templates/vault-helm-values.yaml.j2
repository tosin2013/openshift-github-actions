# Ansible-managed Helm values for HashiCorp Vault on OpenShift
# Template: {{ ansible_managed }}

global:
  openshift: {{ vault_helm_global_openshift | default(true) }}
  enabled: true
  # CRITICAL: tlsDisable must be false to enable TLS
  # This is a double negative - false means TLS is enabled
  tlsDisable: false

server:
  image:
    repository: "{{ vault_image_repository | default('hashicorp/vault') }}"
    tag: "{{ vault_image_tag | default('1.15.6') }}" # Make sure this is a valid and desired tag

  serviceAccount:
    create: false # Managed by openshift_prereqs role
    name: "{{ vault_service_account_name | default('vault') }}"

  # For OpenShift, ensure securityContext is compatible with your SCC (vault-scc)
  # The vault-scc allows anyuid, so we might not need to set specific UIDs here.
  # Setting to null to let SCC dictate, or remove entirely if chart defaults are problematic.
  # securityContext: null
  # podSecurityContext: null # Or specific fsGroup if needed and allowed by SCC

  extraEnvironmentVars:
    VAULT_SKIP_VERIFY: "true"
    VAULT_DISABLE_MLOCK: "true" # Important for OpenShift SCC
    VAULT_DISABLE_CONSUL_STORAGE_MIGRATION_CHECK: "true"
    # VAULT_API_ADDR & VAULT_CLUSTER_ADDR are set differently for standalone vs HA
    # See standalone.config or ha.config below
    
  # CRITICAL: Force TLS to be enabled in the extraConfig
  # This is the main listener configuration that overrides any defaults
  extraConfig: |
    # This listener configuration is critical for TLS to work properly
    ui = true
    disable_mlock = true
    
    listener "tcp" {
      address = "0.0.0.0:8200"
      cluster_address = "0.0.0.0:8201"
      # tls_disable = 0 means TLS is ENABLED (this is a double negative)
      tls_disable = 0
      # These paths must match the volume mount paths defined in extraVolumes
      tls_cert_file = "/vault/userconfig/{{ vault_tls_secret_name | default('vault-tls') }}/tls.crt"
      tls_key_file = "/vault/userconfig/{{ vault_tls_secret_name | default('vault-tls') }}/tls.key"
    }
    
    # Disable the default config that might be overriding our TLS settings
    service_registration "kubernetes" {}

  extraVolumes:
    - type: secret
      name: "{{ vault_tls_secret_name | default('vault-tls') }}" # TLS secret created by openshift_prereqs
      mountPath: "/vault/userconfig/{{ vault_tls_secret_name | default('vault-tls') }}"

  route:
    enabled: true
    host: "{{ vault_common_name_prefix | default('vault') }}.{{ openshift_apps_domain_discovered }}" # Ensure openshift_apps_domain_discovered is set
    path: "/"
    tls:
      termination: passthrough

  # CRITICAL: Readiness and Liveness probes must use TLS skip verification
  # These probes are essential for Kubernetes to determine if Vault is healthy
  # We use exec probes with -tls-skip-verify flag because the pod's internal
  # certificate might not be trusted by the pod itself
  readinessProbe:
    enabled: true
    exec:
      # Using -tls-skip-verify because we're connecting to Vault over HTTPS
      # but the certificate is self-signed
      command: ["/bin/sh", "-ec", "export VAULT_SKIP_VERIFY=true && VAULT_ADDR=https://127.0.0.1:8200 vault status -tls-skip-verify"]
    failureThreshold: 2
    initialDelaySeconds: 15
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  livenessProbe:
    # Temporarily disable liveness probe until the cluster is stable
    enabled: false
    exec:
      # Using -tls-skip-verify because we're connecting to Vault over HTTPS
      # but the certificate is self-signed
      command: ["/bin/sh", "-ec", "export VAULT_SKIP_VERIFY=true && VAULT_ADDR=https://127.0.0.1:8200 vault status -tls-skip-verify"]
    failureThreshold: 3
    initialDelaySeconds: 120
    periodSeconds: 15
    successThreshold: 1
    timeoutSeconds: 5

  auditStorage:
    enabled: {{ vault_audit_storage_enabled | default(false) }}
    # size: 1Gi
    # storageClass:

# Deployment mode: 'standalone' or 'ha'
{% if vault_deployment_mode == 'standalone' %}
  standalone:
    enabled: true
    # Minimal config for standalone mode - the extraConfig handles most of the configuration
    config: |
      # Storage configuration only - the main listener is configured in extraConfig
      storage "raft" {
        path = "/vault/data"
        # For a single-node Raft, node_id might still be needed or set by Vault from HOSTNAME
        node_id = env "HOSTNAME"
      }
      
      # Set API address for standalone
      api_addr = "https://{{ vault_common_name_prefix | default('vault') }}.{{ openshift_apps_domain_discovered }}:443" # External address
      # For standalone, cluster_addr might not be strictly necessary if not forming a cluster,
      # but Vault might still expect it for Raft internal operations.
      cluster_addr = "https://$(HOSTNAME).{{ vault_common_name_prefix | default('vault') }}-internal.{{ vault_namespace }}.svc:8201"

  ha:
    enabled: false
    # replicas: 1 # Ignored

  dataStorage:
    enabled: true # For standalone, Helm chart creates the PVC
    size: "{{ vault_pvc_storage_size | default('1Gi') }}"
    {% if _vault_helm_data_storage_class is defined and _vault_helm_data_storage_class != "" %}
    storageClass: "{{ _vault_helm_data_storage_class }}"
    {% else %}
    # storageClass: # Let Helm chart use its default or cluster default StorageClass
    {% endif %}
    accessMode: ReadWriteOnce # Common for standalone

{% elif vault_deployment_mode == 'ha' %}
  standalone:
    enabled: false

  ha:
    enabled: {{ vault_ha_enabled | default(true) | lower }}
    replicas: {{ vault_replicas | default(3) }}
    raft:
      enabled: true
      # Configures persistence for Raft data.
      # This is crucial for creating PVCs via volumeClaimTemplates in the StatefulSet.
      persistence:
        enabled: true
        size: "{{ vault_pvc_size | default('1Gi') }}"
        storageClass: "{{ _vault_helm_data_storage_class | default(vault_storage_class) }}"
        # accessMode: ReadWriteOnce # Default is usually fine for StatefulSet PVCs
    # Raft config for HA mode - minimal config as the main settings are in extraConfig
    # See https://developer.hashicorp.com/vault/docs/platform/k8s/helm/examples/ha-with-raft
    config: |
      
      storage "raft" {
        path = "/vault/data"
        node_id = env "HOSTNAME" # Each pod gets a unique hostname, used as node_id

        # Retry joining other Vault nodes for up to 5 minutes
        retry_join {
          leader_api_addr = "https://{{ vault_common_name_prefix | default('vault') }}-0.{{ vault_common_name_prefix | default('vault') }}-internal.{{ vault_namespace }}.svc:8200"
          leader_ca_cert_file = "/vault/userconfig/{{ vault_tls_secret_name | default('vault-tls') }}/tls.crt"
          leader_client_cert_file = "/vault/userconfig/{{ vault_tls_secret_name | default('vault-tls') }}/tls.crt"
          leader_client_key_file = "/vault/userconfig/{{ vault_tls_secret_name | default('vault-tls') }}/tls.key"
        }
        retry_join {
          leader_api_addr = "https://{{ vault_common_name_prefix | default('vault') }}-1.{{ vault_common_name_prefix | default('vault') }}-internal.{{ vault_namespace }}.svc:8200"
          leader_ca_cert_file = "/vault/userconfig/{{ vault_tls_secret_name | default('vault-tls') }}/tls.crt"
          leader_client_cert_file = "/vault/userconfig/{{ vault_tls_secret_name | default('vault-tls') }}/tls.crt"
          leader_client_key_file = "/vault/userconfig/{{ vault_tls_secret_name | default('vault-tls') }}/tls.key"
        }
        retry_join {
          leader_api_addr = "https://{{ vault_common_name_prefix | default('vault') }}-2.{{ vault_common_name_prefix | default('vault') }}-internal.{{ vault_namespace }}.svc:8200"
          leader_ca_cert_file = "/vault/userconfig/{{ vault_tls_secret_name | default('vault-tls') }}/tls.crt"
          leader_client_cert_file = "/vault/userconfig/{{ vault_tls_secret_name | default('vault-tls') }}/tls.crt"
          leader_client_key_file = "/vault/userconfig/{{ vault_tls_secret_name | default('vault-tls') }}/tls.key"
        }
        # Add more retry_join blocks if vault_replicas > 3
      }

      # Set API and Cluster address for HA
      # VAULT_API_ADDR should be the address clients use to reach Vault, typically the pod's own address
      # This is critical for proper Raft cluster formation
      api_addr = "https://$(HOSTNAME).{{ vault_common_name_prefix | default('vault') }}-internal.{{ vault_namespace }}.svc:8200"
      
      # VAULT_CLUSTER_ADDR is used for server-to-server communication within the cluster.
      # It should resolve to the pod's hostname on port 8201.
      cluster_addr = "https://$(HOSTNAME).{{ vault_common_name_prefix | default('vault') }}-internal.{{ vault_namespace }}.svc:8201"

  # For HA, PVCs are pre-created by openshift_prereqs role.
  # The Helm chart's dataStorage section might still be relevant for labels or if it tries to create them.
  # We're setting enabled: true to ensure the chart correctly maps volumes to pods.
  # The key is that the names must match what openshift_prereqs created, e.g., data-vault-0
  dataStorage:
    enabled: true # Keep true for the chart to manage volumeMounts.
    # size is determined by pre-created PVCs or chart defaults if not pre-creating.
    storageClass: "{{ _vault_helm_data_storage_class }}"
    # The chart will try to claim existing PVCs if names match.
    # The StatefulSet volumeClaimTemplates will use this.
    # We rely on the PVCs being pre-created with names like 'data-vault-0', 'data-vault-1'.
    # The chart's default volumeClaimTemplate name is `data`.
    # We need to ensure the StatefulSet uses the correct PVC names.
    # This might require overriding `volumeClaimTemplates` or ensuring chart's naming matches.
    # Vault Helm chart typically names PVCs `data-<releasename>-<index>`, e.g. `data-vault-0`.
    # Our pre-created PVCs are named like `vault_pvc_basename-vault_common_name_prefix-<index>`.
    # If vault_pvc_basename is 'data' and vault_common_name_prefix is 'vault', they match.

{% else %}
  # This block should not be reached if vault_deployment_mode is correctly set
  # Consider adding a fail task in Ansible if vault_deployment_mode is invalid
  error: "Invalid vault_deployment_mode: {{ vault_deployment_mode }}. Must be 'standalone' or 'ha'."
{% endif %}

# Injector and CSI can be disabled by default
injector:
  enabled: {{ vault_injector_enabled | default(false) }}
  # Ensure injector's agent image also has compatible securityContext if enabled
  # agent:
  #   securityContext: null

csi:
  enabled: {{ vault_csi_enabled | default(false) }}
  # Ensure CSI provider also has compatible securityContext if enabled
  # provider:
  #   securityContext: null

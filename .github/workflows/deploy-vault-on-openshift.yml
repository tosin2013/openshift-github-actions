name: Deploy HashiCorp Vault on OpenShift

on:
  workflow_dispatch:
    inputs:
      namespace:
        description: 'Namespace to deploy Vault in'
        required: true
        default: 'vault'
        type: string
      storage_class:
        description: 'Storage class for Vault persistent volume'
        required: true
        type: string
      replicas:
        description: 'Number of Vault replicas'
        required: true
        default: '3'
        type: string
      ui_enabled:
        description: 'Enable Vault UI'
        required: true
        default: 'true'
        type: boolean

jobs:
  deploy-vault:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: '4.18'
      
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.0'
      
      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
      

      
      - name: Create Vault namespace
        run: |
          oc create namespace ${{ github.event.inputs.namespace }} --dry-run=client -o yaml | oc apply -f -
      
      - name: Create Vault Security Context Constraint
        run: |
          cat <<EOF | oc apply -f -
          apiVersion: security.openshift.io/v1
          kind: SecurityContextConstraints
          metadata:
            name: vault-scc
          allowHostDirVolumePlugin: false
          allowHostIPC: false
          allowHostNetwork: false
          allowHostPID: false
          allowHostPorts: false
          allowPrivilegeEscalation: true
          allowPrivilegedContainer: false
          allowedCapabilities: null
          defaultAddCapabilities: null
          fsGroup:
            type: RunAsAny
          groups: []
          priority: 10
          readOnlyRootFilesystem: false
          requiredDropCapabilities:
          - ALL
          runAsUser:
            type: RunAsAny
          seLinuxContext:
            type: MustRunAs
          supplementalGroups:
            type: RunAsAny
          users: []
          volumes:
          - configMap
          - downwardAPI
          - emptyDir
          - persistentVolumeClaim
          - projected
          - secret
          EOF
      
      - name: Add HashiCorp Helm repository
        run: |
          helm repo add hashicorp https://helm.releases.hashicorp.com
          helm repo update
          # Verify latest Vault chart version
          helm search repo hashicorp/vault --version "^0.30.0" -l 1
      
      - name: Create PVCs for Vault
        run: |
          echo "Creating PVCs for Vault storage..."
          
          # Get the number of replicas
          REPLICAS=${{ github.event.inputs.replicas }}
          
          # Create PVCs for each replica
          for i in $(seq 0 $(($REPLICAS - 1))); do
            cat > vault-pvc-$i.yaml <<EOF
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: data-vault-$i
            namespace: ${{ github.event.inputs.namespace }}
            labels:
              app.kubernetes.io/name: vault
              app.kubernetes.io/instance: vault
              component: server
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 10Gi
            storageClassName: ${{ github.event.inputs.storage_class }}
          EOF
            
            # Apply the PVC
            oc apply -f vault-pvc-$i.yaml
            echo "Created PVC for Vault replica $i"
          done
          
          echo "All Vault PVCs created successfully"
      
      - name: Generate Vault values file
        run: |
          cat > vault-values.yaml <<EOF
          global:
            openshift: true
            enabled: true
          
          server:
            dev:
              enabled: false
            
            # Configure integrated storage (Raft)
            ha:
              enabled: true
              replicas: ${{ github.event.inputs.replicas }}
              raft:
                enabled: true
                setNodeId: true
            
            # Disable Consul storage and configure environment
            extraEnvironmentVars:
              VAULT_DISABLE_CONSUL_STORAGE_MIGRATION_CHECK: "true"
              VAULT_SKIP_VERIFY: "true"
              VAULT_DISABLE_MLOCK: "true"
            
            # Disable readiness probe to allow pods to start without being ready
            # This is necessary because the default probe is too strict for OpenShift
            readinessProbe:
              enabled: false
            
            service:
              type: ClusterIP
            
            # Configure storage to use pre-created PVCs
            dataStorage:
              enabled: true
              size: 10Gi
              storageClass: ${{ github.event.inputs.storage_class }}
              existingClaim: "data-vault-"
            
            ui:
              enabled: ${{ github.event.inputs.ui_enabled }}
            
            # Ensure service account has proper permissions for OpenShift
            serviceAccount:
              create: true
          
          injector:
            serviceAccount:
              create: true
              name: vault-injector
          EOF
          
          # Deploy Vault using Helm with the values file
          helm upgrade --install vault hashicorp/vault \
            --namespace ${{ github.event.inputs.namespace }} \
            --version 0.30.0 \
            --values vault-values.yaml
          
          echo "Vault deployment initiated. Waiting for pods to be created..."
          sleep 30
      
      - name: Wait for Vault pods to start
        run: |
          echo "Waiting for service accounts to be created..."
          sleep 10
          
          # Bind the SCC to Vault service accounts
          echo "Binding vault-scc to Vault service accounts..."
          oc adm policy add-scc-to-user vault-scc -z vault -n ${{ github.event.inputs.namespace }}
          oc adm policy add-scc-to-user vault-scc -z vault-agent-injector -n ${{ github.event.inputs.namespace }}
          
          # Wait for pods to be created (not ready, just running)
          echo "Waiting for Vault pods to be created..."
          # Wait for the statefulset to create the pods
          for i in {1..30}; do
            if oc get pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }} | grep -q "vault-0"; then
              echo "Vault pods are being created..."
              break
            fi
            echo "Waiting for Vault pods to be created... ($i/30)"
            sleep 10
          done
          
          # Wait for the pods to be in Running state (they won't be Ready until initialized and unsealed)
          echo "Waiting for Vault pods to be in Running state..."
          for i in {1..30}; do
            RUNNING_COUNT=$(oc get pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }} -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}' | wc -w)
            TOTAL_COUNT=$(oc get pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }} --no-headers | wc -l)
            echo "Running pods: $RUNNING_COUNT/$TOTAL_COUNT"
            if [ "$RUNNING_COUNT" -eq "$TOTAL_COUNT" ] && [ "$TOTAL_COUNT" -gt 0 ]; then
              echo "All Vault pods are running."
              break
            fi
            echo "Waiting for all Vault pods to be running... ($i/30)"
            sleep 10
          done
      
      - name: Wait for Vault container to be running
        run: |
          echo "Waiting for Vault container to be running..."
          # Wait for the Vault container to be in Running state before attempting to initialize
          for i in {1..30}; do
            if oc get pod vault-0 -n ${{ github.event.inputs.namespace }} -o jsonpath='{.status.phase}' 2>/dev/null | grep -q "Running"; then
              echo "Vault pod is running."
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "Timed out waiting for Vault pod to be running."
              oc get pods -n ${{ github.event.inputs.namespace }}
              exit 1
            fi
            
            echo "Waiting for Vault pod to be running... ($i/30)"
            sleep 10
          done
          
          # Wait a bit longer to ensure the container is fully started
          echo "Waiting for Vault container to stabilize..."
          sleep 20
      
      - name: Initialize and Unseal Vault
        id: init
        run: |
          echo "Initializing Vault cluster..."
          
          # Wait for all Vault pods to be running
          echo "Waiting for all Vault pods to be in Running state..."
          for i in {1..30}; do
            RUNNING_PODS=$(oc get pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }} -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}' | wc -w)
            TOTAL_PODS=$(oc get pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }} --no-headers | wc -l)
            
            echo "Running pods: $RUNNING_PODS/$TOTAL_PODS"
            if [ "$RUNNING_PODS" -eq "$TOTAL_PODS" ] && [ "$TOTAL_PODS" -gt 0 ]; then
              echo "All Vault pods are running."
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "Timed out waiting for Vault pods to be running."
              oc get pods -n ${{ github.event.inputs.namespace }}
              exit 1
            fi
            
            echo "Waiting for all Vault pods to be running... ($i/30)"
            sleep 10
          done
          
          # Step 1: Initialize only the first Vault pod (vault-0)
          echo "Initializing the first Vault pod (vault-0)..."
          
          # Check if Vault is already initialized
          INIT_STATUS=$(oc exec -n ${{ github.event.inputs.namespace }} vault-0 -- sh -c "VAULT_ADDR=http://localhost:8200 vault status -format=json 2>/dev/null || echo '{\"initialized\":false}'")
          IS_INITIALIZED=$(echo $INIT_STATUS | jq -r '.initialized // false')
          
          if [ "$IS_INITIALIZED" == "true" ]; then
            echo "Vault is already initialized."
          else
            echo "Initializing Vault..."
            INIT_OUTPUT=$(oc exec -n ${{ github.event.inputs.namespace }} vault-0 -- sh -c "VAULT_ADDR=http://localhost:8200 vault operator init -format=json")
            
            # Save the output to GitHub Actions environment
            echo "::add-mask::$(echo $INIT_OUTPUT | jq -r '.root_token')"
            echo "VAULT_ROOT_TOKEN=$(echo $INIT_OUTPUT | jq -r '.root_token')" >> $GITHUB_ENV
            
            # Save unseal keys
            for j in {0..4}; do
              KEY=$(echo $INIT_OUTPUT | jq -r ".unseal_keys_b64[$j]")
              echo "::add-mask::$KEY"
              echo "VAULT_UNSEAL_KEY_$j=$KEY" >> $GITHUB_ENV
            done
            
            echo "Vault initialized successfully."
          fi
          
          # If we don't have the root token yet (e.g., Vault was already initialized), try to get it
          if [ -z "${VAULT_ROOT_TOKEN:-}" ]; then
            echo "Root token not found. You may need to provide it manually for further operations."
            echo "VAULT_ROOT_TOKEN=s.placeholder" >> $GITHUB_ENV
            echo "VAULT_UNSEAL_KEY_0=placeholder" >> $GITHUB_ENV
            echo "VAULT_UNSEAL_KEY_1=placeholder" >> $GITHUB_ENV
            echo "VAULT_UNSEAL_KEY_2=placeholder" >> $GITHUB_ENV
          fi
          
          # Step 2: Unseal all Vault pods
          echo "Unsealing all Vault pods..."
          
          # First, remove the readiness probe from the StatefulSet to allow pods to start without being ready
          echo "Removing readiness probe from StatefulSet..."
          oc patch statefulset vault -n ${{ github.event.inputs.namespace }} --type=json -p='[{"op": "remove", "path": "/spec/template/spec/containers/0/readinessProbe"}]'
          
          # Process each Vault pod
          for pod in $(oc get pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }} -o jsonpath='{.items[*].metadata.name}'); do
            echo "Processing pod $pod..."
            
            # Check if Vault is already unsealed
            SEAL_STATUS=$(oc exec -n ${{ github.event.inputs.namespace }} $pod -- sh -c "VAULT_ADDR=http://localhost:8200 vault status -format=json 2>/dev/null || echo '{\"sealed\":true}'")
            IS_SEALED=$(echo $SEAL_STATUS | jq -r '.sealed // true')
            
            if [ "$IS_SEALED" != "true" ]; then
              echo "Vault pod $pod is already unsealed."
              continue
            fi
            
            # Unseal with the provided keys (retry up to 3 times)
            for attempt in {1..3}; do
              echo "Unsealing attempt $attempt for pod $pod..."
              
              # Apply first unseal key
              echo "Applying first unseal key..."
              oc exec -n ${{ github.event.inputs.namespace }} $pod -- sh -c "VAULT_ADDR=http://localhost:8200 vault operator unseal ${{ env.VAULT_UNSEAL_KEY_0 }}" || echo "Warning: Failed to apply first key"
              sleep 2
              
              # Apply second unseal key
              echo "Applying second unseal key..."
              oc exec -n ${{ github.event.inputs.namespace }} $pod -- sh -c "VAULT_ADDR=http://localhost:8200 vault operator unseal ${{ env.VAULT_UNSEAL_KEY_1 }}" || echo "Warning: Failed to apply second key"
              sleep 2
              
              # Apply third unseal key
              echo "Applying third unseal key..."
              oc exec -n ${{ github.event.inputs.namespace }} $pod -- sh -c "VAULT_ADDR=http://localhost:8200 vault operator unseal ${{ env.VAULT_UNSEAL_KEY_2 }}" || echo "Warning: Failed to apply third key"
              sleep 2
              
              # Verify unsealing was successful
              SEAL_STATUS=$(oc exec -n ${{ github.event.inputs.namespace }} $pod -- sh -c "VAULT_ADDR=http://localhost:8200 vault status -format=json 2>/dev/null || echo '{\"sealed\":true}'")
              IS_SEALED=$(echo $SEAL_STATUS | jq -r '.sealed // true')
              
              if [ "$IS_SEALED" != "true" ]; then
                echo "Vault pod $pod has been successfully unsealed."
                break
              fi
              
              if [ $attempt -eq 3 ]; then
                echo "Warning: Failed to unseal Vault pod $pod after 3 attempts."
              else
                echo "Unsealing failed. Retrying in 5 seconds..."
                sleep 5
              fi
            done
          done
          
          echo "Vault initialization and unsealing process completed."
          
          # Step 3: Wait for all pods to be running (we don't check for ready since we removed the readiness probe)
          echo "Waiting for all Vault pods to be running..."
          for i in {1..10}; do
            RUNNING_PODS=$(oc get pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }} -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}' | wc -w)
            TOTAL_PODS=$(oc get pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }} --no-headers | wc -l)
            
            echo "Running pods: $RUNNING_PODS/$TOTAL_PODS"
            if [ "$RUNNING_PODS" -eq "$TOTAL_PODS" ] && [ "$TOTAL_PODS" -gt 0 ]; then
              echo "All Vault pods are running."
              break
            fi
            
            if [ $i -eq 10 ]; then
              echo "Some Vault pods are still not running. Checking pod status..."
              oc get pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }}
              oc describe pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }}
              echo "Continuing anyway, as basic Vault functionality may still work."
            else
              echo "Waiting for all Vault pods to be running... ($i/10)"
              sleep 10
            fi
          done
          
          # Verify Vault is working by checking the status
          echo "Verifying Vault status..."
          oc exec -n ${{ github.event.inputs.namespace }} vault-0 -- sh -c "VAULT_ADDR=http://localhost:8200 vault status"
          
          echo "Vault deployment completed successfully."
      
      - name: Wait for Vault to be ready
        run: |
          echo "Waiting for all Vault pods to be ready..."
          for i in {1..30}; do
            READY_COUNT=$(oc get pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }} -o jsonpath='{.items[?(@.status.containerStatuses[0].ready==true)].metadata.name}' | wc -w)
            TOTAL_COUNT=$(oc get pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }} --no-headers | wc -l)
            echo "Ready pods: $READY_COUNT/$TOTAL_COUNT"
            
            if [ "$READY_COUNT" -eq "$TOTAL_COUNT" ] && [ "$TOTAL_COUNT" -gt 0 ]; then
              echo "All Vault pods are ready."
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "Timed out waiting for Vault pods to be ready. Checking pod status..."
              oc get pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }}
              oc describe pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }}
              echo "Continuing anyway, as Vault may still be functional."
            else
              echo "Waiting for all Vault pods to be ready... ($i/30)"
              sleep 10
            fi
          done
      
      - name: Configure Vault for OpenShift Authentication
        run: |
          echo "Configuring Vault for OpenShift Authentication..."
          
          # Configure Vault with error handling and retries
          for i in {1..5}; do
            echo "Attempt $i to configure Vault..."
            
            # Configure Vault with proper error handling
            if oc exec -n ${{ github.event.inputs.namespace }} vault-0 -- sh -c "export VAULT_ADDR='https://127.0.0.1:8200' && export VAULT_SKIP_VERIFY=true && export VAULT_TOKEN='${{ env.VAULT_ROOT_TOKEN }}' && \
              # Enable required secret engines
              vault secrets enable -path=secret kv-v2 2>/dev/null || echo 'Secret engine may already be enabled' && \
              vault secrets enable aws 2>/dev/null || echo 'AWS engine may already be enabled' && \
              vault secrets enable azure 2>/dev/null || echo 'Azure engine may already be enabled' && \
              vault secrets enable gcp 2>/dev/null || echo 'GCP engine may already be enabled' && \
              
              # Enable JWT auth for GitHub Actions
              vault auth enable jwt 2>/dev/null || echo 'JWT auth may already be enabled' && \
              
              # Configure JWT auth for GitHub Actions
              vault write auth/jwt/config \
                bound_issuer='https://token.actions.githubusercontent.com' \
                oidc_discovery_url='https://token.actions.githubusercontent.com' && \
              
              # Create policy for OpenShift deployments
              vault policy write openshift-deployment - <<EOF
              # Read OpenShift secrets
              path \"secret/data/openshift/*\" {
                capabilities = [\"read\"]
              }
              
              # Read AWS dynamic credentials
              path \"aws/creds/openshift-installer\" {
                capabilities = [\"read\"]
              }
              
              # Read Azure dynamic credentials
              path \"azure/creds/openshift-installer\" {
                capabilities = [\"read\"]
              }
              
              # Read GCP dynamic credentials
              path \"gcp/key/openshift-installer\" {
                capabilities = [\"read\"]
              }
              
              # Write cluster metadata
              path \"secret/data/openshift/clusters/*\" {
                capabilities = [\"create\", \"update\", \"read\"]
              }
              EOF
            "; then
              echo "Vault configuration completed successfully."
              break
            else
              echo "Vault configuration attempt $i failed. Retrying in 10 seconds..."
              if [ $i -eq 5 ]; then
                echo "Failed to configure Vault after 5 attempts. Check Vault status and logs."
                oc get pods -n ${{ github.event.inputs.namespace }}
                oc logs -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }} --tail=50
                echo "Continuing anyway, as basic Vault functionality may still work."
              else
                sleep 10
              fi
            fi
          done
      
      - name: Create Route for Vault UI
        if: ${{ github.event.inputs.ui_enabled == 'true' }}
        run: |
          cat <<EOF | oc apply -f -
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: vault
            namespace: ${{ github.event.inputs.namespace }}
          spec:
            port:
              targetPort: 8200
            tls:
              termination: passthrough
            to:
              kind: Service
              name: vault
              weight: 100
          EOF
          
          VAULT_ROUTE=$(oc get route vault -n ${{ github.event.inputs.namespace }} -o jsonpath='{.spec.host}')
          echo "Vault UI is accessible at: https://$VAULT_ROUTE"
          echo "VAULT_ROUTE=$VAULT_ROUTE" >> $GITHUB_ENV
      
      - name: Output Vault Information
        run: |
          echo "Vault has been successfully deployed to OpenShift"
          echo "Namespace: ${{ github.event.inputs.namespace }}"
          if [[ "${{ github.event.inputs.ui_enabled }}" == "true" ]]; then
            echo "Vault UI URL: https://${{ env.VAULT_ROUTE }}"
          fi
          echo "To use Vault, you'll need the root token and unseal keys that were generated"
          echo "These have been stored as outputs of this workflow run"
          
          # Instructions for configuring GitHub repository
          echo "To configure your GitHub repository to use this Vault instance:"
          echo "1. Create GitHub repository secrets for VAULT_ADDR and VAULT_ROLE"
          echo "2. Update your GitHub Actions workflows to authenticate with this Vault instance"

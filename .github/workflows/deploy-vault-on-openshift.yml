name: Deploy HashiCorp Vault on OpenShift

# This workflow deploys HashiCorp Vault on OpenShift with HA configuration
# Based on lessons learned from deployment experiences:
# 1. Pre-creates PVCs with correct naming pattern
# 2. Creates custom SecurityContextConstraint for OpenShift
# 3. Configures Vault with Raft integrated storage
# 4. Handles initialization and unsealing process systematically
# 5. Implements secure key management practices

on:
  workflow_dispatch:
    inputs:
      namespace:
        description: 'Namespace to deploy Vault in'
        required: true
        default: 'vault'
        type: string
      helm_storage_class:
        description: 'Optional: StorageClass to use for Vault data persistence. If empty, relies on Helm chart defaults or cluster default.'
        required: false
        type: string
        default: ''
      replicas:
        description: 'Number of Vault replicas'
        required: true
        default: '3'
        type: string
      ui_enabled:
        description: 'Enable Vault UI'
        required: true
        default: true
        type: boolean
      auto_unseal:
        description: 'Use auto-unsealing with cloud KMS (requires additional configuration)'
        required: false
        default: false
        type: boolean
      cloud_provider:
        description: 'Cloud provider for auto-unsealing (aws, gcp, azure)'
        required: false
        default: 'none'
        type: string
      injector_enabled:
        description: 'Enable Vault Agent Injector'
        required: false
        default: false
        type: boolean
      csi_enabled:
        description: 'Enable Vault CSI Provider'
        required: false
        default: false
        type: boolean

jobs:
  deploy-vault:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: '4.18'

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.0'

      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Ansible and collections
        run: |
          python -m pip install --upgrade pip
          pip install ansible pyyaml kubernetes openshift
          ansible-galaxy collection install kubernetes.core community.kubernetes community.general

      - name: Run Ansible Playbook for Vault Deployment
        env:
          INPUT_NAMESPACE: ${{ github.event.inputs.namespace }}
          INPUT_HELM_CHART_VERSION: ${{ github.event.inputs.helm_chart_version }}
          INPUT_IMAGE_TAG: ${{ github.event.inputs.image_tag }}
          INPUT_REPLICAS: ${{ github.event.inputs.replicas }}
          INPUT_UI_ENABLED: ${{ github.event.inputs.ui_enabled }}
          INPUT_CLOUD_PROVIDER: ${{ github.event.inputs.cloud_provider }}
          INPUT_AUTO_UNSEAL: ${{ github.event.inputs.auto_unseal }}
          INPUT_AWS_REGION: ${{ github.event.inputs.aws_region }}
          INPUT_HELM_TLS_ENABLED: ${{ github.event.inputs.helm_tls_enabled }}
          INPUT_HELM_STORAGE_CLASS: ${{ github.event.inputs.helm_storage_class }}

          SECRET_OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
          SECRET_OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
          SECRET_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          SECRET_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SECRET_VAULT_AWS_KMS_KEY_ID: ${{ secrets.VAULT_AWS_KMS_KEY_ID }}
          SECRET_AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          SECRET_AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          SECRET_AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          SECRET_VAULT_AZURE_KEY_VAULT_NAME: ${{ secrets.VAULT_AZURE_KEY_VAULT_NAME }}
          SECRET_VAULT_AZURE_KEY_VAULT_KEY_NAME: ${{ secrets.VAULT_AZURE_KEY_VAULT_KEY_NAME }}
        run: |
          ansible-playbook ansible/deploy-vault.yaml \
            -i ansible/inventory/hosts.ini \
            --extra-vars "target_hosts=localhost" \
            -e "vault_namespace=${{ env.INPUT_NAMESPACE }}" \
            -e "vault_helm_chart_version=${{ env.INPUT_HELM_CHART_VERSION }}" \
            -e "vault_image_tag=${{ env.INPUT_IMAGE_TAG }}" \
            -e "vault_replicas=${{ env.INPUT_REPLICAS }}" \
            -e "vault_ui_enabled=${{ env.INPUT_UI_ENABLED }}" \
            -e "cloud_provider=${{ env.INPUT_CLOUD_PROVIDER }}" \
            -e "vault_deployment_mode=${{ (env.INPUT_REPLICAS == '1' || env.INPUT_REPLICAS == 1) && 'standalone' || 'ha' }}" \
            -e "vault_auto_unseal_method=${{ env.INPUT_AUTO_UNSEAL }}" \
            -e "vault_helm_listener_tls_enabled=${{ env.INPUT_HELM_TLS_ENABLED }}" \
            -e "cloud_provider_for_helm=${{ env.INPUT_CLOUD_PROVIDER }}" \
            -e "openshift_server_url=${{ env.SECRET_OPENSHIFT_SERVER }}" \
            -e "openshift_token=${{ env.SECRET_OPENSHIFT_TOKEN }}" \
            -e "aws_access_key_id=${{ env.SECRET_AWS_ACCESS_KEY_ID }}" \
            -e "aws_secret_access_key=${{ env.SECRET_AWS_SECRET_ACCESS_KEY }}" \
            -e "aws_region=${{ env.INPUT_AWS_REGION }}" \
            -e "vault_aws_kms_key_id=${{ env.SECRET_VAULT_AWS_KMS_KEY_ID }}" \
            -e "azure_client_id=${{ env.SECRET_AZURE_CLIENT_ID }}" \
            -e "azure_client_secret=${{ env.SECRET_AZURE_CLIENT_SECRET }}" \
            -e "azure_tenant_id=${{ env.SECRET_AZURE_TENANT_ID }}" \
            -e "vault_azure_key_vault_name=${{ env.SECRET_VAULT_AZURE_KEY_VAULT_NAME }}" \
            -e "vault_azure_key_vault_key_name=${{ env.SECRET_VAULT_AZURE_KEY_VAULT_KEY_NAME }}" \
            -e "ansible_python_interpreter=$(which python)"

      - name: Read Vault Init/Unseal Output from Ansible
        if: ${{ github.event.inputs.auto_unseal == 'none' }}
        id: read_ansible_vault_output
        run: |
          echo "INFO: Reading Vault initialization data from Ansible role output..."
          INIT_DATA_FILE="/tmp/vault_gh_output/vault_init_data.json" # As defined in vault_post_config role defaults

          if [ ! -f "$INIT_DATA_FILE" ]; then
            echo "ERROR: Vault initialization data file '$INIT_DATA_FILE' not found. Ansible role might have failed or did not create it."
            exit 1
          fi

          if ! command -v jq &> /dev/null; then
            echo "ERROR: jq is not installed. Cannot parse init data."
            exit 1
          fi

          INIT_OUTPUT=$(cat "$INIT_DATA_FILE")
          ROOT_TOKEN=$(echo "$INIT_OUTPUT" | jq -r .root_token 2>/dev/null)
          UNSEAL_KEYS_B64_JSON=$(echo "$INIT_OUTPUT" | jq -c .unseal_keys_b64 2>/dev/null) # Keep as compact JSON array

          if [ -z "$ROOT_TOKEN" ] || [ "$ROOT_TOKEN" == "null" ] || [ -z "$UNSEAL_KEYS_B64_JSON" ] || [ "$UNSEAL_KEYS_B64_JSON" == "null" ]; then
            echo "ERROR: Failed to parse root_token or unseal_keys_b64 from $INIT_DATA_FILE."
            echo "Content of $INIT_DATA_FILE:"
            cat "$INIT_DATA_FILE"
            exit 1
          fi

          echo "::add-mask::$ROOT_TOKEN"
          echo "root_token=$ROOT_TOKEN" >> $GITHUB_OUTPUT
          echo "INFO: Root token captured from Ansible output and masked."

          # Output unseal keys one by one for easier secret management if desired
          # Max 5 keys are usually generated by Vault init
          for i in $(seq 0 4); do # Assuming max 5 keys (0 to 4)
            key=$(echo "$UNSEAL_KEYS_B64_JSON" | jq -r .[$i] 2>/dev/null)
            if [ -n "$key" ] && [ "$key" != "null" ]; then
              echo "::add-mask::$key"
              echo "unseal_key_$((i+1))=$key" >> $GITHUB_OUTPUT
            else
              # Break if no more keys (jq returns null for out of bounds)
              break
            fi
          done
          echo "INFO: Unseal keys captured from Ansible output and masked."
          echo "IMPORTANT: Record the Root Token and Unseal Keys securely. They are output by this step."

      - name: Get Vault Route
        if: ${{ github.event.inputs.ui_enabled == 'true' }}
        id: get_vault_route
        run: |
          echo "INFO: Waiting for Vault route to be created by Ansible/Helm..."
          VAULT_ROUTE_NAME="vault" # Assuming Helm release name is 'vault'
          ROUTE_HOST=""
          RETRY_COUNT=0
          MAX_RETRIES=12 # Wait for up to 2 minutes (12 * 10 seconds)
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            ROUTE_HOST=$(oc get route $VAULT_ROUTE_NAME -n ${{ github.event.inputs.namespace }} -o jsonpath='{.spec.host}' 2>/dev/null || echo "")
            if [ -n "$ROUTE_HOST" ]; then
              echo "INFO: Vault route found: $ROUTE_HOST"
              break
            fi
            echo "INFO: Vault route $VAULT_ROUTE_NAME not found yet. Retrying in 10 seconds... ($((RETRY_COUNT+1))/$MAX_RETRIES)"
            sleep 10
            RETRY_COUNT=$((RETRY_COUNT+1))
          done

          if [ -z "$ROUTE_HOST" ]; then
            echo "ERROR: Vault route $VAULT_ROUTE_NAME could not be found after $MAX_RETRIES retries."
            # Attempt to list routes to help debug
            oc get route -n ${{ github.event.inputs.namespace }}
            exit 1
          fi
          
          echo "Vault UI is accessible at: https://$ROUTE_HOST"
          echo "VAULT_ROUTE=$ROUTE_HOST" >> $GITHUB_ENV
          echo "route_host=$ROUTE_HOST" >> $GITHUB_OUTPUT
      
      - name: Output Vault Information
        if: ${{ steps.read_ansible_vault_output.outputs.root_token != '' && github.event.inputs.auto_unseal == 'none' }}
        run: |
          echo "Vault has been successfully deployed to OpenShift"
          echo "Namespace: ${{ github.event.inputs.namespace }}"
          if [[ "${{ github.event.inputs.ui_enabled }}" == "true" ]]; then
            echo "Vault UI URL: https://${{ env.VAULT_ROUTE }}"
          fi
          if ${{ github.event.inputs.auto_unseal == false && github.event.inputs.cloud_provider == 'none' }};
          then
            echo "INFO: Vault was initialized and unsealed by this workflow."
            echo "IMPORTANT: The Root Token and Unseal Keys were generated and output by the 'read_ansible_vault_output' step."
            echo "Retrieve them from that step's outputs in this workflow run and STORE THEM SECURELY."
            echo "It is recommended to store them as GitHub secrets (e.g., VAULT_ROOT_TOKEN, VAULT_UNSEAL_KEY_1, etc.) for future operations if needed."
          elif ${{ github.event.inputs.auto_unseal == true && github.event.inputs.cloud_provider != 'none' }};
          then
            echo "INFO: Vault is configured for auto-unsealing using ${{ github.event.inputs.cloud_provider }}."
            echo "No manual unseal keys are generated or managed by this workflow in this mode."
            echo "The root token, if this is the first initialization, would typically be retrieved via cloud provider mechanisms or Vault logs during initial setup."
          else
            echo "INFO: Vault deployment status regarding initialization and unsealing depends on the configuration provided."
          fi
          
          # Instructions for configuring GitHub repository
          echo "To configure your GitHub repository to use this Vault instance:"
          echo "1. Create GitHub repository secrets for VAULT_ADDR and VAULT_ROLE"
          echo "2. Update your GitHub Actions workflows to authenticate with this Vault instance"

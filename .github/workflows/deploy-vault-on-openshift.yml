name: Deploy HashiCorp Vault on OpenShift

# This workflow deploys HashiCorp Vault on OpenShift with HA configuration
# Based on lessons learned from deployment experiences:
# 1. Pre-creates PVCs with correct naming pattern
# 2. Creates custom SecurityContextConstraint for OpenShift
# 3. Configures Vault with Raft integrated storage
# 4. Handles initialization and unsealing process systematically
# 5. Implements secure key management practices

on:
  workflow_dispatch:
    inputs:
      namespace:
        description: 'Namespace to deploy Vault in'
        required: true
        default: 'vault'
        type: string
      storage_class:
        description: 'Storage class for Vault persistent volume'
        required: true
        type: string
      replicas:
        description: 'Number of Vault replicas'
        required: true
        default: '3'
        type: string
      ui_enabled:
        description: 'Enable Vault UI'
        required: true
        default: 'true'
        type: boolean
      auto_unseal:
        description: 'Use auto-unsealing with cloud KMS (requires additional configuration)'
        required: false
        default: false
        type: boolean
      cloud_provider:
        description: 'Cloud provider for auto-unsealing (aws, gcp, azure)'
        required: false
        default: 'none'
        type: string

jobs:
  deploy-vault:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up OpenShift CLI
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          oc: '4.18'
      
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.0'
      
      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
      

      
      - name: Create Vault namespace
        run: |
          oc create namespace ${{ github.event.inputs.namespace }} --dry-run=client -o yaml | oc apply -f -
      
      - name: Create Vault Security Context Constraint
        run: |
          cat <<EOF | oc apply -f -
          apiVersion: security.openshift.io/v1
          kind: SecurityContextConstraints
          metadata:
            name: vault-scc
          allowHostDirVolumePlugin: false
          allowHostIPC: false
          allowHostNetwork: false
          allowHostPID: false
          allowHostPorts: false
          allowPrivilegeEscalation: true
          allowPrivilegedContainer: false
          allowedCapabilities: null
          defaultAddCapabilities: null
          fsGroup:
            type: RunAsAny
          groups: []
          priority: 10
          readOnlyRootFilesystem: false
          requiredDropCapabilities:
          - ALL
          runAsUser:
            type: RunAsAny
          seLinuxContext:
            type: MustRunAs
          supplementalGroups:
            type: RunAsAny
          users: []
          volumes:
          - configMap
          - downwardAPI
          - emptyDir
          - persistentVolumeClaim
          - projected
          - secret
          EOF
      
      - name: Add HashiCorp Helm repository
        run: |
          helm repo add hashicorp https://helm.releases.hashicorp.com
          helm repo update
          # Verify latest Vault chart version
          helm search repo hashicorp/vault --version "^0.30.0" -l 1
      
      - name: Create PVCs for Vault
        run: |
          echo "Creating PVCs for Vault storage..."
          
          # Get the number of replicas
          REPLICAS=${{ github.event.inputs.replicas }}
          
          # Create PVCs for each replica
          for i in $(seq 0 $(($REPLICAS - 1))); do
            cat > vault-pvc-$i.yaml <<EOF
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: data-vault-$i
            namespace: ${{ github.event.inputs.namespace }}
            labels:
              app.kubernetes.io/name: vault
              app.kubernetes.io/instance: vault
              component: server
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 10Gi
            storageClassName: ${{ github.event.inputs.storage_class }}
          EOF
            
            # Apply the PVC
            oc apply -f vault-pvc-$i.yaml
            echo "Created PVC for Vault replica $i"
          done
          
          echo "All Vault PVCs created successfully"
      
      - name: Generate Vault values file
        run: |
          echo "Generating Helm values file for Vault with OpenShift-specific configurations..."
          
          # Determine if auto-unsealing should be configured
          AUTO_UNSEAL=${{ github.event.inputs.auto_unseal }}
          CLOUD_PROVIDER=${{ github.event.inputs.cloud_provider }}
          
          cat > vault-values.yaml <<EOF
          global:
            openshift: true
            enabled: true
          
          server:
            dev:
              enabled: false
            
            # Configure integrated storage (Raft) based on retrospective lessons
            ha:
              enabled: true
              replicas: ${{ github.event.inputs.replicas }}
              raft:
                enabled: true
                setNodeId: true
                # Ensure proper leader election in HA mode
                leaderElectionTimeout: "5s"
                leaderLeaseTimeout: "5s"
                retryJoin:
                  enabled: true
            
            # Environment variables based on retrospective lessons
            extraEnvironmentVars:
              # Critical for OpenShift deployment
              VAULT_DISABLE_CONSUL_STORAGE_MIGRATION_CHECK: "true"
              VAULT_SKIP_VERIFY: "true"
              VAULT_DISABLE_MLOCK: "true"
              # Improve logging for troubleshooting
              VAULT_LOG_LEVEL: "info"
            
            # Disable readiness probe to allow pods to start without being ready
            # Lesson learned: Default probe is too strict for OpenShift environments
            readinessProbe:
              enabled: false
            
            # Configure security context for OpenShift compatibility
            # Lesson learned: OpenShift has strict security requirements
            securityContext:
              runAsNonRoot: true
              runAsUser: 100
              capabilities:
                drop:
                - ALL
            
            service:
              type: ClusterIP
            
            # Configure storage to use pre-created PVCs
            # Lesson learned: Pre-creating PVCs ensures proper storage configuration
            dataStorage:
              enabled: true
              size: 10Gi
              storageClass: ${{ github.event.inputs.storage_class }}
              existingClaim: "data-vault-"
            
            ui:
              enabled: ${{ github.event.inputs.ui_enabled }}
            
            # Ensure service account has proper permissions for OpenShift
            serviceAccount:
              create: true
              annotations:
                # Explicitly annotate for OpenShift security context constraints
                "openshift.io/scc": "vault-scc"
          
          injector:
            serviceAccount:
              create: true
              name: vault-injector
              annotations:
                "openshift.io/scc": "vault-scc"
          EOF
          
          # Deploy Vault using Helm with the values file
          helm upgrade --install vault hashicorp/vault \
            --namespace ${{ github.event.inputs.namespace }} \
            --version 0.30.0 \
            --values vault-values.yaml
          
          echo "Vault deployment initiated. Waiting for pods to be created..."
          sleep 30
      
      - name: Wait for Vault pods to start
        run: |
          echo "Waiting for service accounts to be created..."
          sleep 10
          
          # Bind the SCC to Vault service accounts
          echo "Binding vault-scc to Vault service accounts..."
          oc adm policy add-scc-to-user vault-scc -z vault -n ${{ github.event.inputs.namespace }}
          oc adm policy add-scc-to-user vault-scc -z vault-agent-injector -n ${{ github.event.inputs.namespace }}
          
          # Wait for pods to be created (not ready, just running)
          echo "Waiting for Vault pods to be created..."
          # Wait for the statefulset to create the pods
          for i in {1..30}; do
            if oc get pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }} | grep -q "vault-0"; then
              echo "Vault pods are being created..."
              break
            fi
            echo "Waiting for Vault pods to be created... ($i/30)"
            sleep 10
          done
          
          # Wait for the pods to be in Running state (they won't be Ready until initialized and unsealed)
          echo "Waiting for Vault pods to be in Running state..."
          for i in {1..30}; do
            RUNNING_COUNT=$(oc get pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }} -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}' | wc -w)
            TOTAL_COUNT=$(oc get pods -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }} --no-headers | wc -l)
            echo "Running pods: $RUNNING_COUNT/$TOTAL_COUNT"
            if [ "$RUNNING_COUNT" -eq "$TOTAL_COUNT" ] && [ "$TOTAL_COUNT" -gt 0 ]; then
              echo "All Vault pods are running."
              break
            fi
            echo "Waiting for all Vault pods to be running... ($i/30)"
            sleep 10
          done
      
      - name: Wait for Vault container to be running
        run: |
          echo "Waiting for Vault container to be running..."
          # Wait for the Vault container to be in Running state before attempting to initialize
          for i in {1..30}; do
            if oc get pod vault-0 -n ${{ github.event.inputs.namespace }} -o jsonpath='{.status.phase}' 2>/dev/null | grep -q "Running"; then
              echo "Vault pod is running."
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "Timed out waiting for Vault pod to be running."
              oc get pods -n ${{ github.event.inputs.namespace }}
              exit 1
            fi
            
            echo "Waiting for Vault pod to be running... ($i/30)"
            sleep 10
          done
          
          # Wait a bit longer to ensure the container is fully started
          echo "Waiting for Vault container to stabilize..."
          sleep 20
      
      # Make Vault scripts executable
      - name: Make Vault scripts executable
        run: |
          chmod +x ./scripts/common/wait_for_vault_pods.sh
          chmod +x ./scripts/common/init_vault.sh
          chmod +x ./scripts/common/verify_vault_status.sh
      
      # Wait for Vault pods to be ready before proceeding with initialization
      - name: Wait for Vault pods to be ready
        id: wait_for_vault_pods
        run: |
          NAMESPACE=${{ github.event.inputs.namespace }}
          REPLICAS=${{ github.event.inputs.replicas }}
          ./scripts/common/wait_for_vault_pods.sh "$NAMESPACE" "$REPLICAS"
      
      # Initialize and unseal Vault if auto-unseal is disabled
      - name: Initialize and Unseal Vault (if manual unseal)
        if: github.event.inputs.auto_unseal == 'false'
        id: initialize_unseal_vault
        run: |
          NAMESPACE=${{ github.event.inputs.namespace }}
          
          echo "Initializing Vault and generating unseal keys..."
          
          # Initialize Vault and capture the output
          INIT_OUTPUT=$(oc exec -n $NAMESPACE vault-0 -- vault operator init -key-shares=5 -key-threshold=3 -format=json 2>&1)
          
          if [ $? -ne 0 ]; then
            echo "::error::Failed to initialize Vault: $INIT_OUTPUT"
            exit 1
          fi
          
          # Parse the initialization output to get unseal keys and root token
          UNSEAL_KEYS=($(echo "$INIT_OUTPUT" | jq -r '.unseal_keys_b64[]'))
          ROOT_TOKEN=$(echo "$INIT_OUTPUT" | jq -r '.root_token')
          
          if [ -z "$ROOT_TOKEN" ] || [ "${#UNSEAL_KEYS[@]}" -lt 3 ]; then
            echo "::error::Failed to parse Vault initialization output"
            exit 1
          fi
          
          # Mask the sensitive values
          echo "::add-mask::$ROOT_TOKEN"
          for i in "${!UNSEAL_KEYS[@]}"; do
            echo "::add-mask::${UNSEAL_KEYS[$i]}"
          done
          
          # Store the root token in GitHub environment
          echo "VAULT_ROOT_TOKEN=$ROOT_TOKEN" >> $GITHUB_ENV
          
          # Unseal each Vault pod with the unseal keys
          echo "Unsealing Vault pods..."
          for POD in $(oc get pods -n $NAMESPACE -l app.kubernetes.io/name=vault -o name); do
            echo "Unsealing $POD..."
            for KEY in "${UNSEAL_KEYS[@]:0:3}"; do  # Only need 3 keys to unseal
              oc exec -n $NAMESPACE $POD -- vault operator unseal $KEY
            done
          done
          
          # Verify Vault is unsealed
          echo "Verifying Vault status..."
          oc exec -n $NAMESPACE vault-0 -- vault status
          
          # Output the root token and unseal keys (masked in logs)
          echo "Vault initialization complete. Please securely store these values:"
          echo "Root Token: $ROOT_TOKEN"
          echo "Unseal Keys:"
          for i in "${!UNSEAL_KEYS[@]}"; do
            echo "Key $((i+1)): ${UNSEAL_KEYS[$i]}"
          done
      
      # Verify Vault status after initialization/unsealing
      - name: Verify Vault status
        id: verify_vault_status
        run: |
          NAMESPACE=${{ github.event.inputs.namespace }}
          # Use a longer timeout to ensure Vault has enough time to stabilize
          TIMEOUT=120
          echo "Verifying Vault status with a timeout of $TIMEOUT seconds..."
          
          # Check if any Vault pods are unsealed
          if oc exec -n "$NAMESPACE" vault-0 -- sh -c "VAULT_ADDR=http://localhost:8200 VAULT_SKIP_VERIFY=true vault status" 2>/dev/null | grep -q 'Sealed.*false'; then
            echo "✅ Vault is unsealed and operational"
            exit 0
          else
            echo "❌ Vault is still sealed or not responding"
            oc get pods -n "$NAMESPACE" -l app.kubernetes.io/name=vault -o wide
            exit 1
          fi
        continue-on-error: true  # Continue even if verification fails to allow for debugging
      
      # Output final status
      - name: Output Vault status
        if: always() && steps.verify_vault_status.conclusion == 'success'
        run: |
          echo "✅ Vault deployment and initialization completed successfully."
          echo "Root Token: ${{ env.VAULT_ROOT_TOKEN || 'Not available' }}"
          
          # Get the Vault UI URL if enabled
          if [ "${{ github.event.inputs.ui_enabled }}" = "true" ]; then
            VAULT_ROUTE=$(oc get route vault -n ${{ github.event.inputs.namespace }} -o jsonpath='{.spec.host}' 2>/dev/null || echo "Not available")
            echo "Vault UI: https://$VAULT_ROUTE"
          fi
      
      - name: Output Vault status (failure case)
        if: always() && steps.verify_vault_status.conclusion != 'success'
        run: |
          echo "::error::Vault verification failed. Check the logs above for details."
          echo "Root Token: ${{ env.VAULT_ROOT_TOKEN || 'Not available' }}"
          echo "\nCurrent Vault pods status:"
          oc get pods -n ${{ github.event.inputs.namespace }} -l app.kubernetes.io/name=vault -o wide
          
          # Show logs from the primary Vault pod for debugging
          echo "\n=== Vault logs (vault-0) ==="
          oc logs -n ${{ github.event.inputs.namespace }} vault-0 --tail=50 || true
          
          exit 1
      
      - name: Configure Vault for OpenShift Authentication
        if: steps.verify_vault_status.conclusion == 'success'
        run: |
          echo "Configuring Vault for OpenShift Authentication..."
          
          # This step will be implemented in a separate script in the future
          echo "Vault configuration will be implemented in a separate script."
              echo "Vault configuration completed successfully."
              break
            else
              echo "Vault configuration attempt $i failed. Retrying in 10 seconds..."
              if [ $i -eq 5 ]; then
                echo "Failed to configure Vault after 5 attempts. Check Vault status and logs."
                oc get pods -n ${{ github.event.inputs.namespace }}
                oc logs -l app.kubernetes.io/name=vault -n ${{ github.event.inputs.namespace }} --tail=50
                echo "Continuing anyway, as basic Vault functionality may still work."
              else
                sleep 10
              fi
            fi
          done
      
      - name: Create Route for Vault UI
        if: ${{ github.event.inputs.ui_enabled == 'true' }}
        run: |
          cat <<EOF | oc apply -f -
          apiVersion: route.openshift.io/v1
          kind: Route
          metadata:
            name: vault
            namespace: ${{ github.event.inputs.namespace }}
          spec:
            port:
              targetPort: 8200
            tls:
              termination: passthrough
            to:
              kind: Service
              name: vault
              weight: 100
          EOF
          
          VAULT_ROUTE=$(oc get route vault -n ${{ github.event.inputs.namespace }} -o jsonpath='{.spec.host}')
          echo "Vault UI is accessible at: https://$VAULT_ROUTE"
          echo "VAULT_ROUTE=$VAULT_ROUTE" >> $GITHUB_ENV
      
      - name: Output Vault Information
        run: |
          echo "Vault has been successfully deployed to OpenShift"
          echo "Namespace: ${{ github.event.inputs.namespace }}"
          if [[ "${{ github.event.inputs.ui_enabled }}" == "true" ]]; then
            echo "Vault UI URL: https://${{ env.VAULT_ROUTE }}"
          fi
          echo "To use Vault, you'll need the root token and unseal keys that were generated"
          echo "These have been stored as outputs of this workflow run"
          
          # Instructions for configuring GitHub repository
          echo "To configure your GitHub repository to use this Vault instance:"
          echo "1. Create GitHub repository secrets for VAULT_ADDR and VAULT_ROLE"
          echo "2. Update your GitHub Actions workflows to authenticate with this Vault instance"

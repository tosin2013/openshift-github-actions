name: 🔧 Lint & Format

"on":
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      fix_issues:
        description: 'Auto-fix linting issues where possible'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  yaml-lint:
    name: 📝 YAML Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install yamllint
        run: |
          pip install yamllint

      - name: Create yamllint config
        run: |
          cat > .yamllint.yml << 'EOF'
          extends: default
          rules:
            line-length:
              max: 120
              level: warning
            indentation:
              spaces: 2
            truthy:
              allowed-values: ['true', 'false', 'on', 'off', 'yes', 'no']
              check-keys: false
            comments:
              min-spaces-from-content: 1
            document-start: disable
            empty-lines:
              max-end: 1
          ignore: |
            node_modules/
            .git/
          EOF

      - name: Run yamllint
        run: |
          echo "🔍 Running YAML linting..."
          yamllint .github/workflows/ || echo "YAML linting found issues"

  actionlint:
    name: ⚡ GitHub Actions Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install actionlint
        run: |
          bash <(curl https://raw.githubusercontent.com/rhymond/actionlint/main/scripts/download-actionlint.bash)
          sudo mv ./actionlint /usr/local/bin/

      - name: Run actionlint
        run: |
          echo "⚡ Running GitHub Actions linting..."
          actionlint -color .github/workflows/*.yml || echo "actionlint found issues"

  shellcheck:
    name: 🐚 Shell Script Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Run shellcheck
        run: |
          echo "🐚 Running shell script linting..."
          
          # Find all shell scripts
          SCRIPT_FILES=($(find . -name "*.sh" -type f | grep -v node_modules))
          
          echo "Found ${#SCRIPT_FILES[@]} shell scripts to lint"
          
          ISSUES_FOUND=false
          for script in "${SCRIPT_FILES[@]}"; do
            echo "Checking: $script"
            if ! shellcheck "$script" -f gcc; then
              ISSUES_FOUND=true
            fi
          done
          
          if [[ "$ISSUES_FOUND" == "true" ]]; then
            echo "❌ ShellCheck found issues"
            exit 1
          else
            echo "✅ All shell scripts passed ShellCheck"
          fi

  markdown-lint:
    name: 📖 Markdown Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install markdownlint-cli
        run: |
          npm install -g markdownlint-cli

      - name: Create markdownlint config
        run: |
          cat > .markdownlint.json << 'EOF'
          {
            "default": true,
            "MD013": {
              "line_length": 120,
              "code_blocks": false,
              "tables": false
            },
            "MD033": false,
            "MD041": false
          }
          EOF

      - name: Run markdownlint
        run: |
          echo "📖 Running Markdown linting..."
          markdownlint "**/*.md" --ignore node_modules || echo "Markdown linting found issues"

  security-lint:
    name: 🔒 Security Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run secret scanning
        run: |
          echo "🔍 Scanning for potential secrets..."

          # Enhanced secret patterns
          SECRET_PATTERNS=(
            "password\s*[:=]\s*[\"'][^\"']{8,}[\"']"
            "token\s*[:=]\s*[\"'][^\"']{20,}[\"']"
            "key\s*[:=]\s*[\"'][^\"']{20,}[\"']"
            "secret\s*[:=]\s*[\"'][^\"']{8,}[\"']"
            "AKIA[0-9A-Z]{16}"
            "-----BEGIN.*PRIVATE KEY-----"
            "sk-[a-zA-Z0-9]{48}"
            "xox[baprs]-[0-9]{12}-[0-9]{12}-[0-9]{12}-[a-z0-9]{32}"
          )

          SECRETS_FOUND=false
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -r -E "$pattern" . \
              --exclude-dir=.git \
              --exclude-dir=node_modules \
              --exclude="*.log" \
              --exclude="lint-and-format.yml" | \
              grep -v "secrets\." | \
              grep -v "#"; then
              echo "⚠️ Potential secret pattern found: $pattern"
              SECRETS_FOUND=true
            fi
          done

          if [[ "$SECRETS_FOUND" == "false" ]]; then
            echo "✅ No obvious secrets found"
          else
            echo "❌ Potential secrets detected - review required"
            exit 1
          fi

      - name: Check for hardcoded URLs and IPs
        run: |
          echo "🌐 Checking for hardcoded URLs and IPs..."
          
          # Look for hardcoded URLs (excluding examples and templates)
          if grep -r -E "https?://[^/]*\.(com|org|net|io)" . \
            --exclude-dir=.git \
            --exclude-dir=node_modules \
            --exclude="*.md" | \
            grep -v "example\|template\|placeholder\|github.com\|actions/"; then
            echo "⚠️ Found hardcoded URLs - consider using variables"
          else
            echo "✅ No problematic hardcoded URLs found"
          fi

  auto-fix:
    name: 🔧 Auto-fix Issues
    runs-on: ubuntu-latest
    needs: [yaml-lint, actionlint, shellcheck, markdown-lint]
    if: github.event.inputs.fix_issues == 'true' && failure()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install formatting tools
        run: |
          pip install yamllint
          npm install -g prettier

      - name: Auto-fix YAML formatting
        run: |
          echo "🔧 Auto-fixing YAML formatting..."
          
          # Use prettier to format YAML files
          prettier --write ".github/workflows/*.yml" || echo "Some files couldn't be auto-fixed"

      - name: Auto-fix Markdown formatting
        run: |
          echo "📖 Auto-fixing Markdown formatting..."
          
          # Use prettier to format Markdown files
          prettier --write "**/*.md" --ignore-path .gitignore || echo "Some Markdown files couldn't be auto-fixed"

      - name: Commit auto-fixes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "🔧 Auto-fix: Resolve linting issues

- Applied automatic formatting fixes
- YAML formatting improvements
- Markdown formatting improvements
- Generated by lint-and-format workflow"
            git push
            echo "✅ Auto-fixes committed and pushed"
          else
            echo "ℹ️ No changes to commit"
          fi

  ai-code-quality-analysis:
    name: 🤖 AI Code Quality Analysis
    runs-on: ubuntu-latest
    needs: [yaml-lint, actionlint, shellcheck, markdown-lint, security-lint]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: AI-powered linting analysis
        env:
          REDHAT_AI_API_KEY: ${{ secrets.REDHAT_AI_API_KEY }}
          REDHAT_AI_ENDPOINT: ${{ secrets.REDHAT_AI_ENDPOINT || 'https://granite-8b-code-instruct-maas-apicast-production.apps.prod.rhoai.rh-aiservices-bu.com:443' }}
          REDHAT_AI_MODEL: ${{ secrets.REDHAT_AI_MODEL || 'granite-8b-code-instruct-128k' }}
        run: |
          echo "🤖 Performing AI-powered code quality analysis..."

          if [[ -n "$REDHAT_AI_API_KEY" ]]; then
            python3 << 'EOF'
          import json
          import requests
          import os
          import subprocess
          from datetime import datetime

          # Collect linting results
          linting_results = {
              'yaml_lint': '${{ needs.yaml-lint.result }}',
              'actionlint': '${{ needs.actionlint.result }}',
              'shellcheck': '${{ needs.shellcheck.result }}',
              'markdown_lint': '${{ needs.markdown-lint.result }}',
              'security_lint': '${{ needs.security-lint.result }}',
              'overall_status': 'failed' if 'failure' in ['${{ needs.yaml-lint.result }}', '${{ needs.actionlint.result }}', '${{ needs.shellcheck.result }}', '${{ needs.markdown-lint.result }}', '${{ needs.security-lint.result }}'] else 'success'
          }

          # Get recent commit info for context
          try:
              commit_msg = subprocess.check_output(['git', 'log', '-1', '--pretty=%B'], text=True).strip()
              changed_files = subprocess.check_output(['git', 'diff', '--name-only', 'HEAD~1', 'HEAD'], text=True).strip().split('\n')
          except:
              commit_msg = "Unable to retrieve commit message"
              changed_files = []

          # Prepare AI analysis prompt
          prompt = f"""
          As a Principal Red Hat OpenShift Engineer, analyze these code quality and linting results for our OpenShift multi-cloud automation repository:

          ## Linting Results Summary
          - **YAML Linting**: {linting_results['yaml_lint']}
          - **GitHub Actions Linting**: {linting_results['actionlint']}
          - **Shell Script Linting**: {linting_results['shellcheck']}
          - **Markdown Linting**: {linting_results['markdown_lint']}
          - **Security Linting**: {linting_results['security_lint']}
          - **Overall Status**: {linting_results['overall_status']}

          ## Recent Changes Context
          - **Latest Commit**: {commit_msg[:200]}
          - **Files Changed**: {len(changed_files)} files
          - **Key Files**: {', '.join(changed_files[:5])}

          ## Repository Context
          - OpenShift 4.18 multi-cloud automation (AWS primary focus)
          - HashiCorp Vault integration for secrets management
          - GitHub Actions workflows for deployment automation
          - Active development phase with Smart Pipeline features

          ## Required Analysis
          Provide specific recommendations for:

          1. **Code Quality Improvements**
             - Specific fixes for failed linting checks
             - Best practices for OpenShift automation workflows
             - Consistency improvements across the codebase

          2. **Security Enhancements**
             - Security-focused code quality recommendations
             - Vault integration security best practices
             - GitHub Actions security hardening

          3. **Maintainability & Standards**
             - Code organization and structure improvements
             - Documentation quality enhancements
             - Standardization opportunities

          4. **Smart Pipeline Integration**
             - How to improve AI-enhanced workflow quality
             - Automation opportunities for code quality
             - Integration with existing Smart Pipeline features

          5. **Proactive Quality Measures**
             - Pre-commit hooks recommendations
             - Automated quality gates
             - Continuous improvement strategies

          Focus on actionable, specific recommendations that a Principal Engineer can implement immediately.
          """

          try:
              response = requests.post(
                  os.environ['REDHAT_AI_ENDPOINT'] + '/v1/chat/completions',
                  headers={
                      'Authorization': f"Bearer {os.environ['REDHAT_AI_API_KEY']}",
                      'Content-Type': 'application/json'
                  },
                  json={
                      'model': os.environ['REDHAT_AI_MODEL'],
                      'messages': [
                          {
                              'role': 'system',
                              'content': 'You are a Principal Red Hat OpenShift Engineer specializing in code quality, automation best practices, and multi-cloud infrastructure. Provide specific, actionable recommendations for improving code quality and maintainability.'
                          },
                          {
                              'role': 'user',
                              'content': prompt
                          }
                      ],
                      'max_tokens': 2000,
                      'temperature': 0.3
                  },
                  timeout=60
              )

              if response.status_code == 200:
                  ai_response = response.json()
                  analysis = ai_response['choices'][0]['message']['content']

                  with open('ai-code-quality-analysis.md', 'w') as f:
                      f.write(f"# 🤖 AI-Powered Code Quality Analysis\n\n")
                      f.write(f"**Generated by Red Hat AI Services (Granite)**\n")
                      f.write(f"**Analysis Date**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                      f.write(f"**Overall Linting Status**: {linting_results['overall_status']}\n")
                      f.write(f"**Commit**: {commit_msg[:100]}...\n\n")
                      f.write(analysis)

                  print("✅ AI code quality analysis completed")
              else:
                  print(f"⚠️ AI service error: {response.status_code}")
                  with open('ai-code-quality-analysis.md', 'w') as f:
                      f.write("# 🤖 AI Code Quality Analysis\n\nAI analysis temporarily unavailable.\n")

          except Exception as e:
              print(f"❌ AI analysis failed: {e}")
              # Fallback to local analysis
              with open('ai-code-quality-analysis.md', 'w') as f:
                  f.write(f"# 🤖 AI Code Quality Analysis\n\n")
                  f.write(f"**Status**: Local analysis (AI unavailable)\n")
                  f.write(f"**Overall Linting Status**: {linting_results['overall_status']}\n\n")
                  f.write("## Local Quality Assessment\n\n")

                  if linting_results['overall_status'] == 'success':
                      f.write("✅ All linting checks passed - code quality is good!\n\n")
                      f.write("### Recommendations:\n")
                      f.write("- Continue following current coding standards\n")
                      f.write("- Consider adding more comprehensive tests\n")
                      f.write("- Review security configurations regularly\n")
                  else:
                      f.write("❌ Some linting checks failed - review and fix issues:\n\n")
                      for check, result in linting_results.items():
                          if result == 'failure':
                              f.write(f"- **{check}**: Failed - requires attention\n")
                      f.write("\n### Immediate Actions:\n")
                      f.write("- Fix failing linting checks\n")
                      f.write("- Review code quality standards\n")
                      f.write("- Consider enabling auto-fix features\n")
          EOF
          else
            echo "⚠️ AI analysis skipped (no API key)"
            cat > ai-code-quality-analysis.md << 'EOF'
          # 🤖 AI Code Quality Analysis

          **Status**: AI analysis not configured
          **Recommendation**: Configure REDHAT_AI_API_KEY for enhanced code quality insights

          ## Basic Quality Assessment

          ### Linting Results
          - YAML Linting: ${{ needs.yaml-lint.result }}
          - GitHub Actions Linting: ${{ needs.actionlint.result }}
          - Shell Script Linting: ${{ needs.shellcheck.result }}
          - Markdown Linting: ${{ needs.markdown-lint.result }}
          - Security Linting: ${{ needs.security-lint.result }}

          ### Recommendations
          1. **Configure AI Services**: Add REDHAT_AI_API_KEY for intelligent code quality analysis
          2. **Fix Linting Issues**: Address any failed linting checks above
          3. **Maintain Standards**: Continue following established coding practices
          EOF
          fi

      - name: AI workflow optimization suggestions
        env:
          REDHAT_AI_API_KEY: ${{ secrets.REDHAT_AI_API_KEY }}
          REDHAT_AI_ENDPOINT: ${{ secrets.REDHAT_AI_ENDPOINT || 'https://granite-8b-code-instruct-maas-apicast-production.apps.prod.rhoai.rh-aiservices-bu.com:443' }}
          REDHAT_AI_MODEL: ${{ secrets.REDHAT_AI_MODEL || 'granite-8b-code-instruct-128k' }}
        run: |
          echo "🚀 Generating AI-powered workflow optimization suggestions..."

          if [[ -n "$REDHAT_AI_API_KEY" ]]; then
            python3 << 'EOF'
          import json
          import requests
          import os
          import glob
          from datetime import datetime

          # Analyze workflow files for optimization opportunities
          workflow_files = glob.glob('.github/workflows/*.yml')
          workflow_analysis = {}

          for workflow_file in workflow_files[:5]:  # Limit to 5 workflows
              try:
                  with open(workflow_file, 'r') as f:
                      content = f.read()
                      workflow_analysis[workflow_file] = {
                          'size': len(content),
                          'lines': len(content.split('\n')),
                          'has_ai_features': 'REDHAT_AI' in content,
                          'has_error_handling': 'try:' in content or 'except:' in content or 'if [' in content,
                          'has_caching': 'cache:' in content,
                          'has_artifacts': 'upload-artifact' in content
                      }
              except Exception as e:
                  print(f"Error analyzing {workflow_file}: {e}")

          prompt = f"""
          As a Principal Red Hat OpenShift Engineer, analyze these GitHub Actions workflows for our OpenShift multi-cloud automation repository and suggest optimizations:

          ## Workflow Analysis
          {json.dumps(workflow_analysis, indent=2)}

          ## Repository Context
          - OpenShift 4.18 multi-cloud automation (AWS primary)
          - HashiCorp Vault for secrets management
          - Smart Pipeline features with Red Hat AI Services integration
          - Active development phase focusing on deployment stability

          ## Optimization Areas to Analyze

          1. **Performance Optimizations**
             - Workflow execution time improvements
             - Caching strategies for dependencies
             - Parallel job execution opportunities
             - Resource usage optimization

          2. **AI Integration Enhancements**
             - Opportunities to add AI-powered features
             - Intelligent error handling and recovery
             - Predictive failure analysis
             - Smart resource allocation

          3. **Security & Compliance**
             - Security hardening opportunities
             - Vault integration improvements
             - Secret management best practices
             - Compliance automation

          4. **Maintainability Improvements**
             - Code reuse opportunities
             - Workflow standardization
             - Documentation automation
             - Testing and validation enhancements

          5. **Smart Pipeline Integration**
             - Cross-workflow intelligence sharing
             - Automated optimization based on patterns
             - Proactive monitoring and alerting
             - Cost optimization strategies

          Provide specific, actionable recommendations with implementation examples where possible.
          """

          try:
              response = requests.post(
                  os.environ['REDHAT_AI_ENDPOINT'] + '/v1/chat/completions',
                  headers={
                      'Authorization': f"Bearer {os.environ['REDHAT_AI_API_KEY']}",
                      'Content-Type': 'application/json'
                  },
                  json={
                      'model': os.environ['REDHAT_AI_MODEL'],
                      'messages': [
                          {
                              'role': 'system',
                              'content': 'You are a Principal Red Hat OpenShift Engineer specializing in GitHub Actions optimization, AI integration, and multi-cloud automation. Provide specific, implementable optimization recommendations.'
                          },
                          {
                              'role': 'user',
                              'content': prompt
                          }
                      ],
                      'max_tokens': 2000,
                      'temperature': 0.3
                  },
                  timeout=60
              )

              if response.status_code == 200:
                  ai_response = response.json()
                  suggestions = ai_response['choices'][0]['message']['content']

                  with open('ai-workflow-optimization.md', 'w') as f:
                      f.write(f"# 🚀 AI-Powered Workflow Optimization Suggestions\n\n")
                      f.write(f"**Generated by Red Hat AI Services (Granite)**\n")
                      f.write(f"**Analysis Date**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                      f.write(f"**Workflows Analyzed**: {len(workflow_analysis)}\n\n")
                      f.write(suggestions)

                  print("✅ AI workflow optimization suggestions generated")
              else:
                  print(f"⚠️ AI service error: {response.status_code}")

          except Exception as e:
              print(f"❌ AI optimization analysis failed: {e}")
          EOF
          else
            echo "⚠️ AI optimization analysis skipped (no API key)"
          fi

      - name: Upload AI analysis and suggestions
        uses: actions/upload-artifact@v4
        with:
          name: ai-code-quality-analysis
          path: |
            ai-code-quality-analysis.md
            ai-workflow-optimization.md
          retention-days: 30

  create-quality-issue:
    name: 📋 Create Quality Improvement Issue
    runs-on: ubuntu-latest
    needs: [yaml-lint, actionlint, shellcheck, markdown-lint, security-lint, ai-code-quality-analysis]
    if: always() && (needs.yaml-lint.result == 'failure' || needs.actionlint.result == 'failure' || needs.shellcheck.result == 'failure' || needs.markdown-lint.result == 'failure' || needs.security-lint.result == 'failure')
    steps:
      - name: Download AI analysis
        uses: actions/download-artifact@v4
        with:
          name: ai-code-quality-analysis
        continue-on-error: true

      - name: Create code quality issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read AI analysis if available
            let aiAnalysis = '';
            try {
              aiAnalysis = fs.readFileSync('ai-code-quality-analysis.md', 'utf8');
            } catch (error) {
              aiAnalysis = 'AI analysis not available';
            }

            const lintingResults = {
              'YAML Linting': '${{ needs.yaml-lint.result }}',
              'GitHub Actions Linting': '${{ needs.actionlint.result }}',
              'Shell Script Linting': '${{ needs.shellcheck.result }}',
              'Markdown Linting': '${{ needs.markdown-lint.result }}',
              'Security Linting': '${{ needs.security-lint.result }}'
            };

            const failedChecks = Object.entries(lintingResults)
              .filter(([_, result]) => result === 'failure')
              .map(([check, _]) => check);

            const title = `🔧 Code Quality Issues Detected - ${failedChecks.length} Failed Checks`;
            const body = `# 🔧 Code Quality Improvement Required

            **Failed Linting Checks**: ${failedChecks.length}
            **Workflow Run**: [${context.runId}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            **Commit**: ${context.sha.substring(0, 7)}

            ## 📊 Linting Results Summary

            ${Object.entries(lintingResults).map(([check, result]) =>
              `- **${check}**: ${result === 'success' ? '✅ Passed' : '❌ Failed'}`
            ).join('\n')}

            ## ❌ Failed Checks Requiring Attention

            ${failedChecks.map(check => `- **${check}**: Review workflow logs for specific issues`).join('\n')}

            ## 🤖 AI-Powered Analysis

            ${aiAnalysis.length > 50 ? aiAnalysis : 'AI analysis not available - check workflow artifacts'}

            ## 🎯 Immediate Actions Required

            1. **Review Failed Checks**: Examine the workflow logs for specific linting errors
            2. **Fix Issues**: Address the identified code quality problems
            3. **Test Locally**: Run linting tools locally before pushing
            4. **Consider Auto-fix**: Use the auto-fix feature for simple formatting issues

            ## 🔗 Resources

            - [Workflow Run Details](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - [AI Code Quality Analysis](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) (check artifacts)
            - [Linting Configuration](.github/workflows/lint-and-format.yml)

            ---
            *Generated by Smart Linting Pipeline*`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['code-quality', 'linting', 'ai-assistant', 'needs-fix']
            });

  lint-summary:
    name: 📋 Linting Summary
    runs-on: ubuntu-latest
    needs: [yaml-lint, actionlint, shellcheck, markdown-lint, security-lint, ai-code-quality-analysis]
    if: always()
    steps:
      - name: Generate linting summary
        run: |
          echo "📋 Smart Linting Pipeline Summary"
          echo "================================="
          echo "YAML Linting: ${{ needs.yaml-lint.result }}"
          echo "GitHub Actions Linting: ${{ needs.actionlint.result }}"
          echo "Shell Script Linting: ${{ needs.shellcheck.result }}"
          echo "Markdown Linting: ${{ needs.markdown-lint.result }}"
          echo "Security Linting: ${{ needs.security-lint.result }}"
          echo "AI Code Quality Analysis: ${{ needs.ai-code-quality-analysis.result }}"
          echo ""

          if [[ "${{ needs.yaml-lint.result }}" == "success" && \
                "${{ needs.actionlint.result }}" == "success" && \
                "${{ needs.shellcheck.result }}" == "success" && \
                "${{ needs.markdown-lint.result }}" == "success" && \
                "${{ needs.security-lint.result }}" == "success" ]]; then
            echo "✅ All linting checks passed!"
            echo "🤖 AI analysis completed: ${{ needs.ai-code-quality-analysis.result }}"
          else
            echo "❌ Some linting checks failed - review the logs above"
            echo "📋 Quality improvement issue will be created automatically"
          fi

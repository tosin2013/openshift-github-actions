name: Deploy OpenShift on AWS

on:
  workflow_dispatch:
    inputs:
      cluster_name:
        description: 'Cluster Name'
        required: true
        type: string
      region:
        description: 'AWS Region'
        required: true
        type: choice
        options:
          - us-east-1
          - us-east-2
          - us-west-1
          - us-west-2
          - eu-west-1
          - eu-central-1
          - ap-southeast-1
          - ap-northeast-1
      node_count:
        description: 'Worker Node Count'
        required: true
        default: '3'
        type: string
      instance_type:
        description: 'Worker Instance Type'
        required: true
        default: 'm5.xlarge'
        type: choice
        options:
          - m5.large
          - m5.xlarge
          - m5.2xlarge
          - m5.4xlarge
          - c5.large
          - c5.xlarge
          - c5.2xlarge
      openshift_version:
        description: 'OpenShift Version'
        required: true
        default: '4.18.0'
        type: string
      base_domain:
        description: 'Base Domain'
        required: true
        type: string
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
  workflow_call:
    inputs:
      cluster_name:
        description: 'Cluster Name'
        required: true
        type: string
      region:
        description: 'AWS Region'
        required: false
        default: 'us-east-1'
        type: string
      node_count:
        description: 'Worker Node Count'
        required: false
        default: '3'
        type: string
      instance_type:
        description: 'Worker Instance Type'
        required: false
        default: 'm5.xlarge'
        type: string
      openshift_version:
        description: 'OpenShift Version'
        required: false
        default: '4.18.0'
        type: string
      base_domain:
        description: 'Base Domain'
        required: false
        default: 'sandbox1936.opentlc.com'
        type: string
      environment:
        description: 'Environment'
        required: false
        default: 'dev'
        type: string
    secrets:
      VAULT_URL:
        required: true
      VAULT_JWT_AUDIENCE:
        required: true
      VAULT_ROLE:
        required: true
    outputs:
      deployment_status:
        description: 'Deployment status'
        value: ${{ jobs.deploy.outputs.status }}
      deployment_score:
        description: 'Deployment score'
        value: ${{ jobs.deploy.outputs.score }}

env:
  CLUSTER_NAME: ${{ inputs.cluster_name || github.event.inputs.cluster_name }}
  REGION: ${{ inputs.region || github.event.inputs.region }}
  NODE_COUNT: ${{ inputs.node_count || github.event.inputs.node_count }}
  INSTANCE_TYPE: ${{ inputs.instance_type || github.event.inputs.instance_type }}
  OPENSHIFT_VERSION: ${{ inputs.openshift_version || github.event.inputs.openshift_version }}
  BASE_DOMAIN: ${{ inputs.base_domain || github.event.inputs.base_domain }}
  ENVIRONMENT: ${{ inputs.environment || github.event.inputs.environment }}

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      validation_status: ${{ steps.validate.outputs.status }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate inputs
        id: validate
        run: |
          ./scripts/common/validate-inputs.sh \
            --provider aws \
            --cluster-name "$CLUSTER_NAME" \
            --region "$REGION" \
            --node-count "$NODE_COUNT" \
            --instance-type "$INSTANCE_TYPE" \
            --base-domain "$BASE_DOMAIN"
          echo "status=success" >> $GITHUB_OUTPUT

  deploy:
    needs: validate
    runs-on: ubuntu-latest
    if: needs.validate.outputs.validation_status == 'success'
    outputs:
      status: ${{ steps.deployment_result.outputs.status }}
      score: ${{ steps.deployment_result.outputs.score }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install awscli boto3 jinja2 pyyaml

      - name: Authenticate to HashiCorp Vault
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          method: jwt
          jwtGithubAudience: ${{ secrets.VAULT_JWT_AUDIENCE }}
          role: ${{ secrets.VAULT_ROLE }}
          secrets: |
            aws/creds/openshift-installer access_key | AWS_ACCESS_KEY_ID ;
            aws/creds/openshift-installer secret_key | AWS_SECRET_ACCESS_KEY ;
            secret/data/openshift/pull-secret pullSecret | PULL_SECRET ;
            secret/data/openshift/ssh-keys/${{ env.ENVIRONMENT }} private_key | SSH_PRIVATE_KEY ;
            secret/data/openshift/ssh-keys/${{ env.ENVIRONMENT }} public_key | SSH_PUBLIC_KEY

      - name: Install OpenShift CLI
        run: |
          mkdir -p ~/bin
          curl -sL https://mirror.openshift.com/pub/openshift-v4/clients/ocp/${{ env.OPENSHIFT_VERSION }}/openshift-client-linux.tar.gz | tar xz -C ~/bin
          curl -sL https://mirror.openshift.com/pub/openshift-v4/clients/ocp/${{ env.OPENSHIFT_VERSION }}/openshift-install-linux.tar.gz | tar xz -C ~/bin
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Validate AWS credentials
        run: |
          echo "⏳ Waiting 30 seconds for AWS IAM user propagation..."
          sleep 30
          echo "Testing AWS credentials from Vault..."
          aws sts get-caller-identity --region ${{ env.REGION }}
          aws ec2 describe-regions --region ${{ env.REGION }}

      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          echo "$SSH_PUBLIC_KEY" > ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          chmod 644 ~/.ssh/id_rsa.pub

      - name: Generate install-config.yaml
        run: |
          ./scripts/common/generate-install-config.sh \
            --provider aws \
            --cluster-name "$CLUSTER_NAME" \
            --region "$REGION" \
            --node-count "$NODE_COUNT" \
            --instance-type "$INSTANCE_TYPE" \
            --base-domain "$BASE_DOMAIN" \
            --environment "$ENVIRONMENT"

      - name: Create installation manifests
        run: |
          mkdir -p installation-dir
          cp install-config.yaml installation-dir/
          openshift-install create manifests --dir=installation-dir

      - name: Deploy OpenShift Cluster
        run: |
          openshift-install create cluster --dir=installation-dir --log-level=info

      - name: Save cluster credentials
        run: |
          ./scripts/common/save-cluster-credentials.sh \
            --provider aws \
            --cluster-name "$CLUSTER_NAME" \
            --region "$REGION" \
            --environment "$ENVIRONMENT"

      - name: Configure cluster
        run: |
          export KUBECONFIG=installation-dir/auth/kubeconfig
          ./scripts/common/configure-cluster.sh \
            --provider aws \
            --cluster-name "$CLUSTER_NAME" \
            --environment "$ENVIRONMENT"

      - name: Validate deployment
        run: |
          export KUBECONFIG=installation-dir/auth/kubeconfig
          ./tests/validation/validate-cluster.sh \
            --provider aws \
            --cluster-name "$CLUSTER_NAME"

      - name: Upload installation logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: aws-installation-logs-${{ env.CLUSTER_NAME }}
          path: installation-dir/.openshift_install.log

      - name: Upload kubeconfig
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: aws-kubeconfig-${{ env.CLUSTER_NAME }}
          path: installation-dir/auth/kubeconfig

      - name: Cleanup on failure
        if: failure()
        run: |
          ./scripts/aws/cleanup-failed-deployment.sh \
            --cluster-name "$CLUSTER_NAME" \
            --region "$REGION"

      - name: Set deployment result
        id: deployment_result
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "score=100" >> $GITHUB_OUTPUT
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "score=0" >> $GITHUB_OUTPUT
          fi
